stages:
    - build
    - test
    - upload
    - release

variables:
  PACKAGE_REG_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/fpkg

#------------------#
#  Debug pipeline  #
#------------------#
.build-script:
    stage: build
    script:
        - startsection build "Build application & installer"
        - cd Client
        - cargo build
        - cd ..
        - cd BPXTools
        - cargo build
        - cd ..
        - endsection build

.test-script:
    stage: test
    script:
        - startsection test "Test application"
        - cd BPXTools
        - perl test/test.pl
        - endsection test

build-linux:
    stage: build
    except:
        - master
    image: "rust:latest"
    extends:
        - .build-script
    before_script:
        - . ./gitlab/support/unix.sh
    artifacts:
        paths:
            - BPXTools/target/debug/bpxdbg

build-win64:
    stage: build
    except:
        - master
    tags:
        - windows
        - shared-windows
        - windows-1809
    before_script:
        - . ./gitlab/support/windows.ps1
        - startsection deps "Install job dependencies"
        - choco install -y rust-ms
        - endsection deps
    extends:
        - .build-script
    artifacts:
        paths:
            - BPXTools/target/debug/bpxdbg.exe

test-linux:
    stage: test
    except:
        - master
    image: perl:5.32.1-threaded
    needs: [build-linux]
    before_script:
        - . ./gitlab/support/unix.sh
    extends:
        - .test-script

test-win64:
    stage: test
    except:
        - master
    needs: [build-win64]
    tags:
        - windows
        - shared-windows
        - windows-1809
    before_script:
        - . ./gitlab/support/windows.ps1
        - startsection deps "Install job dependencies"
        - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        - choco install -y strawberryperl
        - refreshenv
        - endsection deps
    extends:
        - .test-script


#------------------#
# Release pipeline #
#------------------#
get-version:
    stage: build
    image: debian:stable
    only:
        - master
    script:
        - cd Client
        # Part 1 > extract the version line
        # Part 2 > extract the version string itself
        # Part 3 > remove colors
        - grep -P 'version = "\d.\d.\d"' Cargo.toml | grep -oP '\d.\d.\d' | cat > versionfile.txt
    artifacts:
        paths:
            - Client/versionfile.txt

build-release-linux:
    stage: build
    image: "rust:latest"
    only:
        - master
    before_script:
        - . ./gitlab/support/unix.sh
        - startsection deps "Install job dependencies"
        - cargo install cargo-deb
        - endsection deps
    script:
        - startsection build "Build application & installer"
        - cd Client
        - cargo build --release
        - cargo deb
        - endsection build
    artifacts:
        paths:
            - Client/target/debian

build-release-win64:
    stage: build
    only:
        - master
    tags:
        - windows
        - shared-windows
        - windows-1809
    before_script:
        - . ./gitlab/support/windows.ps1
        - startsection deps "Install job dependencies"
        - Install-WindowsFeature Net-Framework-Core
        - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        - choco install -y rust-ms
        - choco install wixtoolset --version 3.11.2 -y
        - refreshenv
        - setx /M PATH "%PATH%;C:\Program Files (x86)\WiX Toolset v3.11\bin"
        - candle.exe --version
        - cargo install cargo-wix
        - endsection deps
    script:
        - startsection build "Build application & installer"
        - cd Client
        - cargo build --release
        - cargo wix
        - cargo wix sign
        - endsection build
    artifacts:
        paths:
            - Client/target/wix

upload-artifacts:
    stage: upload
    image: debian:stable
    only:
        - master
    tags:
        - linux
        - docker
    dependencies:
        - build-release-win64
        - build-release-linux
        - get-version
    script:
        - PACKAGE_VERSION=$(cat Client/versionfile.txt)
        - WINDOWS_BIN=$(ls Client/target/wix/ | grep -P '.\.msi' | cat)
        - LINUX_BIN=$(ls Client/target/debian/ | grep -P '.\.deb' | cat)
        - echo "fpkg v${PACKAGE_VERSION}"
        - |
          {
              echo ${WINDOWS_BIN} > Client/windowsfile.txt
              echo ${LINUX_BIN} > Client/linuxfile.txt
          }
        - |
          {
              echo "Uploading windows release (${WINDOWS_BIN})..."
              curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file Client/target/wix/*.msi "${PACKAGE_REG_URL}/${PACKAGE_VERSION}/${WINDOWS_BIN}"
          }
        - |
          {
              echo "Uploading linux release (${LINUX_BIN})..."
              curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file Client/target/debian/*.deb "${PACKAGE_REG_URL}/${PACKAGE_VERSION}/${LINUX_BIN}"
          }
    artifacts:
        paths:
            - Client/windowsfile.txt
            - Client/linuxfile.txt

create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - get-version
    - upload-artifacts
  only:
    - master
  script:
    - PACKAGE_VERSION=$(cat Client/versionfile.txt)
    - WINDOWS_BIN=$(cat Client/windowsfile.txt)
    - LINUX_BIN=$(cat Client/linuxfile.txt)
    - echo "fpkg v${PACKAGE_VERSION}"
    - |
      release-cli create --name "fpkg release ${PACKAGE_VERSION}" --tag-name ${PACKAGE_VERSION} \
        --assets-link "{\"name\":\"${WINDOWS_BIN}\",\"url\":\"${PACKAGE_REG_URL}/${PACKAGE_VERSION}/${WINDOWS_BIN}\"}" \
        --assets-link "{\"name\":\"${LINUX_BIN}\",\"url\":\"${PACKAGE_REG_URL}/${PACKAGE_VERSION}/${LINUX_BIN}\"}" \
